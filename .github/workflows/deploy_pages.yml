name: Create site content to deploy to pages

on:
  workflow_dispatch:
    inputs:
      # refer to variable by ${{ github.event.inputs.<variable name> }}
      MANUAL_REPO_VERSION_TAG:
        description: 'Version tag name to publish the site for - e.g.: v1.0'
        required: true
  push:
    tags:
      - 'v[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+.[0-9]+'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# s. https://github.com/actions/starter-workflows/blob/main/pages/jekyll.yml
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
# s. https://github.com/actions/starter-workflows/blob/main/pages/jekyll.yml
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    name: Build Pages Site
    runs-on: ubuntu-latest

    steps:
      # Log use case if triggered manually
      - name: Log use case if triggered manually
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "Workflow has been triggered manually"
          echo "MANUAL_REPO_VERSION_TAG: ${{ github.event.inputs.MANUAL_REPO_VERSION_TAG }}"
          echo "SOURCE_REPO_REF=refs/tags/${{ github.event.inputs.MANUAL_REPO_VERSION_TAG }}" >> $GITHUB_ENV

      # Log use case if triggered by push
      - name: Log use case if triggered by push
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "Workflow has been triggered by push"
          echo "github.ref: ${{ github.ref }}"
          echo "SOURCE_REPO_REF=${{ github.ref }}" >> $GITHUB_ENV
      
      - name: Abort if reference is not a version tag
        if: ${{ !startsWith(env.SOURCE_REPO_REF, 'refs/tags/v') }}
        run: |
          echo "The selected git ref=${{ env.SOURCE_REPO_REF }} is NOT a valid release tag. Please select a valid release TAG as reference."
          exit 1

      - name: Confirm valid version tag
        run: |
          echo "The selected git ref=${{ env.SOURCE_REPO_REF }} is a valid release tag."

      - name: Initialize Environment
        run: |
          echo "SOURCE_REPO=MHPH/cv.paul-hoffrogge.de" >> $GITHUB_ENV
          echo "SOURCE_DIR=sources" >> $GITHUB_ENV
          echo "SITE_DIR=_site" >> $GITHUB_ENV
          echo "VERSION_TAG=${SOURCE_REPO_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Log Environment
        run: |
          echo "  SOURCE_REPO:     ${SOURCE_REPO}"
          echo "  SOURCE_REPO_REF: ${SOURCE_REPO_REF}"
          echo "  SOURCE_DIR:      ${SOURCE_DIR}"
          echo "  SITE_DIR:        ${SITE_DIR}"
          echo "  VERSION_TAG:     ${VERSION_TAG}"

      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          # clone https://github.com/MHPH/cv.paul-hoffrogge.de
          repository: ${{ env.SOURCE_REPO }}
          path: ${{ env.SOURCE_DIR }}
          ref:  ${{ env.SOURCE_REPO_REF }}
          # !!! We need a dedicated PAT (PersonalAccessToken) to access the other repo
          token: ${{ secrets.PRIVATE_REPO_PAT }}

      - name: Build site content
        run: |
          mkdir -p ./${{ env.SITE_DIR }}
          cp --verbose -R ${{ env.SOURCE_DIR }}/HTML/Paul/* ${{ env.SITE_DIR }}
          # Remove files not to publish
          find ./${{ env.SITE_DIR }} -type f -name 'index-*.html' -print0 | xargs -0 rm -v
          find ./${{ env.SITE_DIR }} -type f -name 'blog*.html' -print0 | xargs -0 rm -v
          find ./${{ env.SITE_DIR }} -type f -name '*.php' -print0 | xargs -0 rm -v
          find ./${{ env.SITE_DIR }} -type f -name '.*' -print0 | xargs -0 rm -v
          find ./${{ env.SITE_DIR }} -type d -name 'demo' -print0 | xargs -0 rm -v -rf
          find ./${{ env.SITE_DIR }} -type d -name 'php' -print0 | xargs -0 rm -v -rf
          # Create site manifest:
          echo "Origin:    ${{ github.repository }}" > ./${{ env.SITE_DIR }}/MANIFEST.txt
          echo "Buildtime: $(date --rfc-3339=seconds)" >> ./${{ env.SITE_DIR }}/MANIFEST.txt
          echo "Version:   ${{ env.VERSION_TAG }}" >> ./${{ env.SITE_DIR }}/MANIFEST.txt

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v2

      - name: Upload Pages site content
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire site built
          path: './${{ env.SITE_DIR }}'

  # Deployment job
  deploy:
    name: Deploy Pages Site
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
